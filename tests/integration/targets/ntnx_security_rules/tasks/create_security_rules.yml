- debug:
    msg: Start testing ntnx_security_rules
####################
- name: create app security rule with inbound and outbound list
  ntnx_security_rules:
    name: test_app_rule
    app_rule:
      target_group:
        peer_specification_type: FILTER
        filter:
          type: CATEGORIES_MATCH_ALL
          kind_list:
            - vm
          params:
            AppType:
              - Apache_Spark
        default_internal_policy: DENY_ALL
      inbound_allow_list:
        - peer_specification_type: FILTER
          filter:
            type: CATEGORIES_MATCH_ALL
            kind_list:
              - vm
            params:
              AppFamily:
                - Databases
                - DevOps
          icmp_type_code_list:
            - code: 1
              type: 1
          tcp_port_range_list:
            - start_port: 22
              end_port: 80
          udp_port_range_list:
            - start_port: 82
              end_port: 8080
          ip_subnet:
            prefix_length: 24
            ip: 192.168.1.1
          description: test description
          protocol: ALL
      outbound_allow_list:
        - peer_specification_type: FILTER
          filter:
            type: CATEGORIES_MATCH_ALL
            kind_list:
              - vm
            params:
              AppFamily:
                - Databases
                - DevOps
      action: MONITOR
    allow_ipv6_traffic: true
    is_policy_hitlog_enabled: true
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.response.status.state == 'COMPLETE'
      - result.response.spec.name=="test_app_rule"
    fail_msg: ' fail: unable to create app security rule with inbound and outbound list'
    success_msg: 'pass: create app security rule with inbound and outbound list successfully'

- name: update app security rule with   outbound list
  ntnx_security_rules:
    security_rule_uuid: '{{ result.response.metadata.uuid }}'
    app_rule:
      action: APPLY
      outbound_allow_list:
        - icmp_type_code_list:
            - code: 1
              type: 1
          peer_specification_type: FILTER
          filter:
            type: CATEGORIES_MATCH_ALL
            kind_list:
              - vm
            params:
              AppFamily:
                - Databases
                - DevOps
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.response.status.state == 'COMPLETE'
      - result.response.spec.resources.app_rule.action == "APPLY"
    fail_msg: ' fail: unable to update app security rule with   outbound list '
    success_msg: 'pass :update app security rule with   outbound list successfully'

- name: delete app security rule
  ntnx_security_rules:
    state: absent
    security_rule_uuid: '{{ result.response.metadata.uuid }}'
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.response.status == 'SUCCEEDED'
    fail_msg: ' fail: unable to delete app security rule '
    success_msg: 'pass : delete app security rule successfully'
####################
- name: update quarantine_rule by adding inbound and outbound list
  ntnx_security_rules:
    security_rule_uuid: '{{quarantine_rule_uuid}}'
    quarantine_rule:
      target_group:
        peer_specification_type: FILTER
        filter:
          type: CATEGORIES_MATCH_ALL
          kind_list:
            - vm
          params:
            Quarantine:
              - Forensics
        default_internal_policy: DENY_ALL
      inbound_allow_list:
        - peer_specification_type: FILTER
          filter:
            type: CATEGORIES_MATCH_ALL
            kind_list:
              - vm
            params:
              AppFamily:
                - Databases
                - DevOps
      outbound_allow_list:
        - peer_specification_type: FILTER
          filter:
            type: CATEGORIES_MATCH_ALL
            kind_list:
              - vm
            params:
              AppFamily:
                - Databases
                - DevOps
      action: MONITOR
    allow_ipv6_traffic: true
    is_policy_hitlog_enabled: true
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.response.status.state == 'COMPLETE'
      - result.response.spec.resources.quarantine_rule.action == "MONITOR"
    fail_msg: ' fail: unable to update quarantine_rule by adding inbound and outbound list '
    success_msg: >-
      pass: update quarantine_rule by adding inbound and outbound list
      succesfully 
####################
- name: >-
    create isolation security rule with first_entity_filter and
    second_entity_filter with check mode 
  ntnx_security_rules:
    name: test_isolation_rule
    isolation_rule:
      first_entity_filter:
        type: CATEGORIES_MATCH_ALL
        kind_list:
          - vm
        params:
          CalmApplication:
            - test_check_123_asadsdas
      second_entity_filter:
        type: CATEGORIES_MATCH_ALL
        kind_list:
          - vm
        params:
          CalmApplication:
            - test_check_123anjsndjasdasd
      action: MONITOR
  register: result
  ignore_errors: true
  check_mode: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.changed == false
      - result.response.spec.name=="test_isolation_rule"
      - result.security_rule_uuid is none
    fail_msg: ' fail: unable to create isolation security rule with first_entity_filter and second_entity_filter with check mode '
    success_msg: >-
      pass: create isolation security rule with first_entity_filter and
      second_entity_filter successfully with check mode 
- name: >-
    create isolation security rule with first_entity_filter and
    second_entity_filter
  ntnx_security_rules:
    name: test_isolation_rule
    isolation_rule:
      first_entity_filter:
        type: CATEGORIES_MATCH_ALL
        kind_list:
          - vm
        params:
          CalmApplication:
            - test_check_123_asadsdas
      second_entity_filter:
        type: CATEGORIES_MATCH_ALL
        kind_list:
          - vm
        params:
          CalmApplication:
            - test_check_123anjsndjasdasd
      action: MONITOR
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.response.spec.name=="test_isolation_rule"
      - result.response.status.state == 'COMPLETE'
    fail_msg: ' fail: unable to create isolation security rule with first_entity_filter and second_entity_filter'
    success_msg: >-
      pass: create isolation security rule with first_entity_filter and
      second_entity_filter successfully

- name: update isoloation security rule action with check_mode
  ntnx_security_rules:
    security_rule_uuid: '{{ result.response.metadata.uuid }}'
    isolation_rule:
      action: APPLY
  register: result
  ignore_errors: true
  check_mode: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.changed == false
      - result.response.spec.name=="test_isolation_rule"
      - result.security_rule_uuid is none
    fail_msg: ' fail: unable to update isoloation security rule action with check_mode'
    success_msg: >-
      pass: update isoloation security rule action with check_mode successfully 

- name: update isoloation security rule action
  ntnx_security_rules:
    security_rule_uuid: '{{ result.response.metadata.uuid }}'
    isolation_rule:
      action: APPLY
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.changed == true
      - result.response.status.state == 'COMPLETE'
      - result.response.spec.resources.isolation_rule.action == "APPLY"
    fail_msg: ' fail: unable to update isolation rule action  '
    success_msg: 'pass : update isolation rule action successfully'
- name: update isoloation security with same values
  ntnx_security_rules:
    security_rule_uuid: '{{ result.response.metadata.uuid }}'
    isolation_rule:
      action: APPLY
  register: output
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - output.failed == false
      - output.changed == false
      - output.msg == "Nothing to change"
    fail_msg: ' fail: unable to update isolation rule action  '
    success_msg: 'pass : update isolation rule action successfully'
- name: delete isolation rule
  ntnx_security_rules:
    state: absent
    security_rule_uuid: '{{ result.response.metadata.uuid }}'
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.response.status == 'SUCCEEDED'
    fail_msg: ' fail: unable to delete isolation security rule '
    success_msg: 'pass : delete isolation security rule successfully'
