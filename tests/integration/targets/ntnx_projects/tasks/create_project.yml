- name:
  debug:
    msg: "Start ntnx_project create tests"

- name: Create Project with minimal spec
  ntnx_projects:
    name: "test-ansible-project"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == true
      - result.response.status.state == 'COMPLETE'
      - result.response.status.name == 'test-ansible-project'
    fail_msg: "Unable to create project with minimal spec"
    success_msg: "Project with minimal spec created successfully"

- set_fact:
    todelete: "{{ todelete + [  result.project_uuid ] }}"

#################################################################

- name: Create Project with check mode
  check_mode: yes
  ntnx_projects:
    name: "test-ansible-project-1"
    desc: desc-123
    subnets: 
      - name: "{{ network.dhcp.name }}"
      - uuid: "{{ static.uuid }}"
    default_subnet:
      name: "{{ network.dhcp.name }}"
    users:
      - "{{ users[0] }}"
      - "{{ users[1] }}"
    external_user_groups:
      - "{{ user_groups[0] }}"
    resource_limits:
      - resource_type: STORAGE
        limit: 2046
  register: result
  ignore_errors: true

- name: Check mode Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.response.spec.name == 'test-ansible-project-1'
      - result.response.spec.description == 'desc-123'
      - result.response.spec.resources.resource_domain.resources[0].limit == 2046 
      - result.response.spec.resources.resource_domain.resources[0].resource_type == 'STORAGE'
      - result.response.spec.resources.user_reference_list[0].uuid == "{{ users[0] }}"
      - result.response.spec.resources.user_reference_list[1].uuid == "{{ users[1] }}"
      - result.response.spec.resources.external_user_group_reference_list[0].uuid == "{{ user_groups[0] }}"
      - result.response.spec.resources.subnet_reference_list[0].uuid == "{{ network.dhcp.uuid }}"
      - result.response.spec.resources.subnet_reference_list[1].uuid == "{{ static.uuid }}"
      - result.response.spec.resources.default_subnet_reference.uuid == "{{ network.dhcp.uuid }}"

    fail_msg: "Check mode failed"
    success_msg: "Check mode operation output verified successfully"

#################################################################

- name: Create Project with all specs
  ntnx_projects:
    name: "test-ansible-project-1"
    desc: desc-123
    clusters:
      - "{{ cluster.uuid }}"
    subnets: 
      - name: "{{ network.dhcp.name }}"
      - uuid: "{{ static.uuid }}"
    default_subnet:
      name: "{{ network.dhcp.name }}"
    users:
      - "{{ users[0] }}"
      - "{{ users[1] }}"
    external_user_groups:
      - "{{ user_groups[0] }}"
    resource_limits:
      - resource_type: STORAGE
        limit: 2046
  register: result
  ignore_errors: true

- set_fact:
    subnet1: "{{result.response.status.resources.subnet_reference_list[0].uuid}}"
    subnet2: "{{result.response.status.resources.subnet_reference_list[1].uuid}}"
    user1: "{{result.response.status.resources.user_reference_list[0].uuid}}"
    user2: "{{result.response.status.resources.user_reference_list[1].uuid}}"

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.response.status.state == 'COMPLETE'
      - result.response.status.name == 'test-ansible-project-1'
      - result.response.status.description == 'desc-123'
      - result.response.status.resources.resource_domain.resources[0].limit == 2046 
      - result.response.status.resources.resource_domain.resources[0].resource_type == 'STORAGE'
      - ( "{{user1}}" == "{{ users[0] }}" and "{{user2}}" == "{{ users[1] }}" ) or ( "{{user2}}" == "{{ users[0] }}" and "{{user1}}" == "{{ users[1] }}" )
      - ( "{{subnet1}}" == "{{ network.dhcp.uuid }}" and "{{subnet2}}" == "{{ static.uuid }}" ) or  ( "{{subnet2}}" == "{{ network.dhcp.uuid }}" and "{{subnet1}}" == "{{ static.uuid }}" )
      - result.response.status.resources.external_user_group_reference_list[0].uuid == "{{ user_groups[0] }}"
      - result.response.status.resources.default_subnet_reference.uuid == "{{ network.dhcp.uuid }}"
      - result.response.status.resources.cluster_reference_list[0].uuid == "{{ cluster.uuid }}"

    fail_msg: "Unable to create project with all specifications"
    success_msg: "Project with all specifications created successfully"

- set_fact:
    todelete: "{{ todelete + [  result.project_uuid ] }}"

#################################################################
- name: Create Project with alredy existing project name
  ntnx_projects:
    name: "{{ project.name }}"
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.changed == false
      - "'Project with given name already exists' in result.msg"
    fail_msg: "Project create didn't failed when existing project name given"
    success_msg: "Project create errored out successfully when existing project name given"

#################################################################
- name: Delete all Created Projects
  ntnx_projects:
    state: absent
    project_uuid: "{{ item }}"
  register: result
  loop: "{{ todelete }}"
  ignore_errors: True

- set_fact:
    todelete: []