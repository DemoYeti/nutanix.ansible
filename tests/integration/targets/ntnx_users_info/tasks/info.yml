---
- debug:
    msg: "start ntnx_users_info tests"

- name: test getting all users
  ntnx_users_info:
  register: users
  ignore_errors: true
  
- name: check listing status
  assert:
    that:
      - users.response is defined
      - users.changed == false
      - users.failed == false
      - users.response.entities is defined
      - users.response.metadata.total_matches > 0
    fail_msg: "Unable to list all users"
    success_msg: "Users listed successfully"
################################################################
- name: List users using length, offset, sort order and sort attribute
  ntnx_users_info:
    length: 2
    offset: 1
    sort_order: "DESCENDING"
    sort_attribute: "username"
  register: result
  ignore_errors: true

- name: check listing status
  assert:
    that:
      - users.response is defined
      - users.changed == false
      - users.failed == false
      - users.response.entities is defined
      - users.response.metadata.total_matches > 0
    fail_msg: "Unable to list all users"
    success_msg: "Users listed successfully"

################################################################
- name: test getting particular user using filter
  ntnx_users_info:
    filter:
      username:    "{{ users.response.entities[1].status.name }}"
  register: result
  ignore_errors: True

- name: check listing status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.entities[0].status.state == "COMPLETE"
      - result.response.entities[0].metadata.uuid == users.response.entities[1].metadata.uuid
    fail_msg: "Unable to get particular user using filter"
    success_msg: "User info obtained successfully using filter"

# ################################################################


- name: test getting particular user using uuid
  ntnx_users_info:
    user_uuid: '{{ users.response.entities[1].metadata.uuid  }}'
  register: result
  ignore_errors: true

- name: check listing status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed ==false
      - result.response.status.name == users.response.entities[1].status.name
      - result.response.status.state == "COMPLETE"
    fail_msg: "Unable to get particular user using uuid"
    success_msg: "user info obtained successfully using uuid"