- debug:
    msg: Start testing ntnx_security_rules_info
###################################
- name: Create isolation_rule for testing
  ntnx_security_rules:
    name: isolation_test_rule
    isolation_rule:
      first_entity_filter:
        type: CATEGORIES_MATCH_ALL
        kind_list:
          - vm
        params:
          CalmApplication:
            - test_check_123_asadsdas
      second_entity_filter:
        type: CATEGORIES_MATCH_ALL
        kind_list:
          - vm
        params:
          CalmApplication:
            - test_check_123anjsndjasdasd
      action: MONITOR
  register: first_rule
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - first_rule.response is defined
      - first_rule.failed == false
      - first_rule.response.status.state == 'COMPLETE'
    fail_msg: ' fail: Unable to create  isolation_rule for testing   '
    success_msg: 'pass:  isolation_rule for testing  created successfully  '
###################################
- name: getting all security rules
  ntnx_security_rules_info: null
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.metadata.kind == "network_security_rule"
    fail_msg: ' fail: unable to get security rules '
    success_msg: 'pass: get all security rules successfully '
###################################
- name: getting particlar security rule using security_rule_uuid
  ntnx_security_rules_info:
    security_rule_uuid: '{{ first_rule.response.metadata.uuid }}'
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
      - result.response.status.state == 'COMPLETE'
      - first_rule.response.metadata.uuid == result.response.metadata.uuid
    fail_msg: ' fail : unable to get particlar security rule using security_rule_uuid'
    success_msg: 'pass: getting  security rule using security_rule_uuid succesfuly'
###################################
- name: getting all secuirty rules sorted
  ntnx_security_rules_info:
    sort_order: ASCENDING
    sort_attribute: Name
  register: result
  ignore_errors: true

- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.changed == false
      - result.failed == false
    fail_msg: ' fail: unable to get all secuirty rules sorted'
    success_msg: 'pass: getting all secuirty rules sorted successfully '
###################################
- name: delete secuirty rule
  ntnx_security_rules:
    state: absent
    security_rule_uuid: '{{ first_rule.response.metadata.uuid }}'
  register: result
  ignore_errors: true
  
- name: Creation Status
  assert:
    that:
      - result.response is defined
      - result.failed == false
      - result.response.status == 'SUCCEEDED'
    fail_msg: ' fail: unable to delete secutiry rule '
    success_msg: 'pass: secuirty rule deleted succesfully '
###################################